(bubblesort
 (bubbling_TCC1 0
  (bubbling_TCC1-1 nil 3783188121 ("" (subtype-tcc) nil nil) nil nil))
 (bubbling_TCC2 0
  (bubbling_TCC2-1 nil 3783188121 ("" (subtype-tcc) nil nil) nil nil))
 (bubbling_TCC3 0
  (bubbling_TCC3-1 nil 3783188121 ("" (subtype-tcc) nil nil) nil nil))
 (bubbling_TCC4 0
  (bubbling_TCC4-1 nil 3783188121 ("" (termination-tcc) nil nil) nil
   nil))
 (bubbling_TCC5 0
  (bubbling_TCC5-1 nil 3783188121 ("" (subtype-tcc) nil nil) nil nil))
 (bubbling_TCC6 0
  (bubbling_TCC6-1 nil 3783188121 ("" (termination-tcc) nil nil) nil
   nil))
 (bubblesort_aux_TCC1 0
  (bubblesort_aux_TCC1-1 nil 3783188121 ("" (subtype-tcc) nil nil) nil
   nil))
 (bubblesort_aux_TCC2 0
  (bubblesort_aux_TCC2-1 nil 3783188121 ("" (termination-tcc) nil nil)
   nil nil))
 (bubblesort_TCC1 0
  (bubblesort_TCC1-1 nil 3783188121 ("" (subtype-tcc) nil nil) nil
   nil))
 (c_bubblesort_aux_TCC1 0
  (c_bubblesort_aux_TCC1-1 nil 3783188145 ("" (subtype-tcc) nil nil)
   nil nil))
 (length_dont_reduce 0
  (length_dont_reduce-1 nil 3783275084
   ("" (measure-induct+ "length(l)" "l")
    (("" (expand "length" 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (assert) nil nil)
           ("2" (inst -1 "cdr(x!1)")
            (("2" (expand "length" -1 2) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (c_bubbling_equiv_bubbling_TCC1 0
  (c_bubbling_equiv_bubbling_TCC1-1 nil 3783189048
   ("" (subtype-tcc) nil nil) nil nil))
 (c_bubbling_equiv_bubbling 0
  (c_bubbling_equiv_bubbling-1 nil 3783189127
   ("" (measure-induct+ "length(l)" "l")
    (("1" (skeep)
      (("1" (case "null?(x!1)")
        (("1" (typepred "n") (("1" (grind) nil nil)) nil)
         ("2" (case "null?(cdr(x!1))")
          (("1" (typepred "n") (("1" (grind) nil nil)) nil)
           ("2" (expand "c_bubbling" 3)
            (("2" (expand "bubbling" 3)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (inst -2 "cons(car(x!1), cdr(cdr(x!1)))")
                    (("1" (inst? -2)
                      (("1" (expand "length" -2)
                        (("1" (expand "length" -2 2)
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (typepred "n") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -1 "cdr(x!1)")
                    (("2" (inst? -1)
                      (("1" (expand "length" -1 2)
                        (("1" (assert) nil nil)) nil)
                       ("2" (typepred "n") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (grind) nil nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (case "null?(x!1)")
        (("1" (typepred "n") (("1" (grind) nil nil)) nil)
         ("2" (case "null?(cdr(x!1))")
          (("1" (typepred "n") (("1" (grind) nil nil)) nil)
           ("2" (expand "c_bubbling" 4)
            (("2" (expand "bubbling" 4)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (inst -3 "cons(car(x!1), cdr(cdr(x!1)))")
                    (("1" (expand "length" -3)
                      (("1" (expand "length" -3 2)
                        (("1" (assert)
                          (("1" (inst? -3)
                            (("1" (assert) nil nil)
                             ("2" (typepred "n")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -2 "cdr(x!1)")
                    (("2" (expand "length" -2 2)
                      (("2" (assert)
                        (("2" (inst? -2)
                          (("1" (assert) nil nil)
                           ("2" (typepred "n") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (grind) nil nil))
          nil))
        nil))
      nil)
     ("3" (typepred "n!1") (("3" (grind) nil nil)) nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (c_bubbling def-decl "[list[nat], nat]" bubblesort nil)
    (bubbling def-decl "list[nat]" bubblesort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (c_bubblessort_equiv_bubblesort 0
  (c_bubblessort_equiv_bubblesort-1 nil 3783188252
   ("" (measure-induct+ "length(l)" "l")
    (("" (expand "bubblesort" 1)
      (("" (expand "c_bubblesort" 1)
        (("" (lift-if) (("" (prop) (("" (postpone) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (c_bubbling_preserv_length 0
  (c_bubbling_preserv_length-1 nil 3783294099
   ("" (measure-induct+ "length(l)" "l")
    (("1" (skeep)
      (("1" (typepred "cont")
        (("1" (case "null?(x!1)")
          (("1" (grind) nil nil)
           ("2" (case "null?(cdr(x!1))")
            (("1" (grind) nil nil)
             ("2" (expand "c_bubbling" 3)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (expand "length" 1)
                    (("1" (assert)
                      (("1" (inst -3 "cons(car(x!1), cdr(cdr(x!1)))")
                        (("1" (inst -3 "cont-1")
                          (("1" (expand "length" -3 1)
                            (("1" (expand "length" -3 2)
                              (("1"
                                (expand "length" -3 2)
                                (("1"
                                  (expand "length" -3 1)
                                  (("1"
                                    (expand "length" 1 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "length" 2 2)
                    (("2" (inst -2 "cdr(x!1)")
                      (("2" (inst -2 "cont-1")
                        (("1" (expand "length" -2 2)
                          (("1" (assert)
                            (("1" (expand "length" 2 1)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (case "cont<0")
                          (("1" (assert) nil nil)
                           ("2" (case "cont-1<0")
                            (("1" (assert) nil nil)
                             ("2" (assert)
                              (("2"
                                (hide 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (typepred "cont!1") (("2" (grind) nil nil)) nil)
     ("3" (typepred "cont!1") (("3" (grind) nil nil)) nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (c_bubbling def-decl "[list[nat], nat]" bubblesort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (c_bubbling_is_linear 0
  (c_bubbling_is_linear-1 nil 3783272297
   ("" (measure-induct+ "length(l)" "l")
    (("1" (skeep)
      (("1" (case "null?(x!1)")
        (("1" (typepred "cont") (("1" (grind) nil nil)) nil)
         ("2" (typepred "cont")
          (("2" (case "null?(cdr(x!1))")
            (("1" (grind) nil nil)
             ("2" (expand "c_bubbling" 3)
              (("2" (case "cont=0")
                (("1" (grind) nil nil)
                 ("2" (lift-if)
                  (("2" (prop)
                    (("1" (inst -3 "cons(car(x!1), cdr(cdr(x!1)))")
                      (("1" (inst?)
                        (("1" (expand "length" -3 1)
                          (("1" (expand "length" -3 2)
                            (("1" (expand "length" -3 2)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "length" -3 1)
                                  (("1"
                                    (expand "length" 1)
                                    (("1"
                                      (expand "length" 1)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (inst -2 "cdr(x!1)")
                      (("2" (inst? -2)
                        (("1" (expand "length" -2 2)
                          (("1" (assert)
                            (("1" (expand "length" 2)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (typepred "cont")
        (("2" (case "null?(x!1)")
          (("1" (grind) nil nil)
           ("2" (case "null?(cdr(x!1))")
            (("1" (grind) nil nil)
             ("2" (expand "c_bubbling" 4)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (inst -4 "cons(car(x!1), cdr(cdr(x!1)))")
                    (("2" (expand "length" -4)
                      (("2" (expand "length" -4 2)
                        (("2" (assert)
                          (("2" (expand "length" 1)
                            (("2" (expand "length" 1)
                              (("2"
                                (assert)
                                (("2"
                                  (inst? -4)
                                  (("1" (assert) nil nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (inst -3 "cdr(x!1)")
                    (("3" (expand "length" -3 2)
                      (("3" (assert)
                        (("3" (inst? -3)
                          (("1" (expand "length" 2)
                            (("1" (assert) nil nil)) nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (typepred "cont!1") (("3" (grind) nil nil)) nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (c_bubbling def-decl "[list[nat], nat]" bubblesort nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (c_bubbling_sum_n 0
  (c_bubbling_sum_n-1 nil 3783282223
   ("" (measure-induct+ "length(l)" "l")
    (("1" (case "null?(x!1)")
      (("1" (grind) nil nil)
       ("2" (case "null?(cdr(x!1))")
        (("1" (grind) nil nil)
         ("2" (skeep)
          (("2" (expand "c_bubbling" 3)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (assert) nil nil)
                 ("2" (inst -2 "cons(car(x!1), cdr(cdr(x!1)))")
                  (("2" (inst -2 " cont - 1")
                    (("1" (expand "length" -2) (("1" (grind) nil nil))
                      nil)
                     ("2" (assert)
                      (("2" (typepred "cont")
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (inst -1 "cdr(x!1)")
                  (("3" (expand "length" -1 2)
                    (("3" (inst -1 " cont - 1")
                      (("1" (assert) nil nil)
                       ("2" (typepred "cont") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep) (("3" (assert) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (case "null?(x!1)")
        (("1" (grind) nil nil)
         ("2" (case "null?(cdr(x!1))")
          (("1" (grind) nil nil)
           ("2" (expand "c_bubbling" 4)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (assert) nil nil)
                 ("2" (inst -3 "cons(car(x!1), cdr(cdr(x!1)))")
                  (("2" (expand "length" -3)
                    (("2" (assert)
                      (("2" (expand "length" -3 2)
                        (("2" (inst -3 "cont-1")
                          (("1" (grind) nil nil)
                           ("2" (typepred "cont")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred "cont!1") (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (grind) nil nil))
          nil))
        nil))
      nil)
     ("3" (typepred "cont!1") (("3" (grind) nil nil)) nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (c_bubbling def-decl "[list[nat], nat]" bubblesort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (bubblesort_aux_list_dont_chage_number_TCC1 0
  (bubblesort_aux_list_dont_chage_number_TCC1-1 nil 3783291987
   ("" (subtype-tcc) nil nil) nil nil))
 (bubblesort_aux_list_dont_chage_number 0
  (bubblesort_aux_list_dont_chage_number-1 nil 3783292006
   ("" (skeep)
    (("" (measure-induct+ "cont-1" "cont")
      (("1" (skeep)
        (("1" (copy -1)
          (("1" (expand "c_bubblesort_aux" 1 1)
            (("1" (lift-if)
              (("1" (prop)
                (("1" (grind) nil nil)
                 ("2" (inst -1 "x!1-1")
                  (("1" (inst -1 "c_bubbling(l, x!1)`1")
                    (("1" (assert)
                      (("1" (expand "c_bubblesort_aux" 2 2)
                        (("1" (inst -2 "x!1-1")
                          (("1" (inst -2 "c_bubbling(l2, x!1)`1")
                            (("1" (assert)
                              (("1"
                                (lemma "c_bubbling_preserv_length")
                                (("1"
                                  (inst -1 "l" "x!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma
                                       "c_bubbling_preserv_length")
                                      (("1"
                                        (inst -1 "l2" "x!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (hide -1 -2)
                                            (("1"
                                              (lemma
                                               "c_bubbling_sum_n")
                                              (("1"
                                                (inst -1 "l" "x!1")
                                                (("1"
                                                  (lemma
                                                   "c_bubbling_sum_n")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "l2"
                                                     "x!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "y!1") (("2" (grind) nil nil)) nil)
       ("3" (typepred "y!1")
        (("3" (typepred "x!1") (("3" (grind) nil nil)) nil)) nil)
       ("4" (typepred "cont!1") (("4" (grind) nil nil)) nil)
       ("5" (typepred "cont!1") (("5" (grind) nil nil)) nil)
       ("6" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (bubblesort_aux_sum_nquadratic_TCC1 0
  (bubblesort_aux_sum_nquadratic_TCC1-1 nil 3783284463
   ("" (subtype-tcc) nil nil) nil nil))
 (bubblesort_aux_sum_nquadratic_TCC2 0
  (bubblesort_aux_sum_nquadratic_TCC2-1 nil 3784217674
   ("" (subtype-tcc) nil nil) nil nil))
 (bubblesort_aux_sum_nquadratic 0
  (bubblesort_aux_sum_nquadratic-1 nil 3783284467
   ("" (skeep)
    (("" (measure-induct+ "cont-1" "cont")
      (("1" (expand "^")
        (("1" (expand "expt")
          (("1" (expand "expt")
            (("1" (expand "expt")
              (("1" (expand "c_bubblesort_aux" 1)
                (("1" (lift-if)
                  (("1" (prop)
                    (("1" (assert) nil nil)
                     ("2" (inst -1 "x!1 - 1")
                      (("1" (assert)
                        (("1"
                          (lemma
                           "bubblesort_aux_list_dont_chage_number")
                          (("1"
                            (inst -1 "l" "x!1-1"
                             "c_bubbling(l, x!1)`1")
                            (("1" (lemma "c_bubbling_preserv_length")
                              (("1"
                                (inst -1 "l" "x!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma "c_bubbling_sum_n")
                                      (("1"
                                        (inst -1 "l" "x!1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "cont!1") (("2" (grind) nil nil)) nil)
       ("3" (postpone) nil nil))
      nil))
    nil)
   nil shostak))
 (bubbling_is_quadratic_TCC1 0
  (bubbling_is_quadratic_TCC1-1 nil 3783188249
   ("" (subtype-tcc) nil nil) nil nil))
 (bubbling_is_quadratic 0
  (bubbling_is_quadratic-1 nil 3783260976
   ("" (measure-induct+ "length(l)" "l")
    (("" (expand "member")
      (("" (expand "Omicron")
        (("" (inst 1 "1" "0")
          (("" (skeep)
            (("" (case "null?(x!1)")
              (("1" (grind) nil nil)
               ("2" (case "null?(cdr(x!1))")
                (("1" (grind) nil nil)
                 ("2" (case "null?(cdr(cdr(x!1)))")
                  (("1" (grind) nil nil)
                   ("2" (expand "c_bubblesort" 4)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("2" (expand "c_bubblesort_aux" 2)
                          (("2" (lift-if)
                            (("2" (prop)
                              (("1" (grind) nil nil)
                               ("2" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (postpone) nil nil))
                  nil)
                 ("3" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (c_bubbling_quadratic 0
  (c_bubbling_quadratic-1 nil 3783280678
   ("" (measure-induct+ "length(l)" "l")
    (("" (case "null?(x!1)")
      (("1" (grind) nil nil)
       ("2" (case "null?(cdr(x!1))")
        (("1" (grind) nil nil)
         ("2" (case "null?(cdr(cdr(x!1)))")
          (("1" (grind) nil nil)
           ("2" (expand "c_bubblesort" 4)
            (("2" (lift-if)
              (("2" (assert)
                (("2" (expand "c_bubblesort_aux" 4)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (grind) nil nil) ("2" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (postpone) nil nil))
          nil)
         ("3" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak)))

