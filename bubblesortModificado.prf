(bubblesort
 (bubbling_TCC1 0
  (bubbling_TCC1-1 nil 3783188121 ("" (subtype-tcc) nil nil) nil nil))
 (bubbling_TCC2 0
  (bubbling_TCC2-1 nil 3783188121 ("" (subtype-tcc) nil nil) nil nil))
 (bubbling_TCC3 0
  (bubbling_TCC3-1 nil 3783188121 ("" (subtype-tcc) nil nil) nil nil))
 (bubbling_TCC4 0
  (bubbling_TCC4-1 nil 3783188121 ("" (termination-tcc) nil nil) nil
   nil))
 (bubbling_TCC5 0
  (bubbling_TCC5-1 nil 3783188121 ("" (subtype-tcc) nil nil) nil nil))
 (bubbling_TCC6 0
  (bubbling_TCC6-1 nil 3783188121 ("" (termination-tcc) nil nil) nil
   nil))
 (bubblesort_aux_TCC1 0
  (bubblesort_aux_TCC1-1 nil 3783188121 ("" (subtype-tcc) nil nil) nil
   nil))
 (bubblesort_aux_TCC2 0
  (bubblesort_aux_TCC2-1 nil 3783188121 ("" (termination-tcc) nil nil)
   nil nil))
 (bubblesort_TCC1 0
  (bubblesort_TCC1-1 nil 3783188121 ("" (subtype-tcc) nil nil) nil
   nil))
 (c_bubblesort_aux_TCC1 0
  (c_bubblesort_aux_TCC1-1 nil 3783188145 ("" (subtype-tcc) nil nil)
   nil nil))
 (length_dont_reduce 0
  (length_dont_reduce-1 nil 3783275084
   ("" (measure-induct+ "length(l)" "l")
    (("" (expand "length" 1)
      (("" (lift-if)
        (("" (prop)
          (("1" (assert) nil nil)
           ("2" (inst -1 "cdr(x!1)")
            (("2" (expand "length" -1 2) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (c_bubbling_equiv_bubbling_TCC1 0
  (c_bubbling_equiv_bubbling_TCC1-1 nil 3783189048
   ("" (subtype-tcc) nil nil) nil nil))
 (c_bubbling_equiv_bubbling 0
  (c_bubbling_equiv_bubbling-1 nil 3783189127
   ("" (measure-induct+ "length(l)" "l")
    (("1" (skeep)
      (("1" (case "null?(x!1)")
        (("1" (typepred "n") (("1" (grind) nil nil)) nil)
         ("2" (case "null?(cdr(x!1))")
          (("1" (typepred "n") (("1" (grind) nil nil)) nil)
           ("2" (expand "c_bubbling" 3)
            (("2" (expand "bubbling" 3)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (inst -2 "cons(car(x!1), cdr(cdr(x!1)))")
                    (("1" (inst? -2)
                      (("1" (expand "length" -2)
                        (("1" (expand "length" -2 2)
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (typepred "n") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -1 "cdr(x!1)")
                    (("2" (inst? -1)
                      (("1" (expand "length" -1 2)
                        (("1" (assert) nil nil)) nil)
                       ("2" (typepred "n") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (grind) nil nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (case "null?(x!1)")
        (("1" (typepred "n") (("1" (grind) nil nil)) nil)
         ("2" (case "null?(cdr(x!1))")
          (("1" (typepred "n") (("1" (grind) nil nil)) nil)
           ("2" (expand "c_bubbling" 4)
            (("2" (expand "bubbling" 4)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (inst -3 "cons(car(x!1), cdr(cdr(x!1)))")
                    (("1" (expand "length" -3)
                      (("1" (expand "length" -3 2)
                        (("1" (assert)
                          (("1" (inst? -3)
                            (("1" (assert) nil nil)
                             ("2" (typepred "n")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -2 "cdr(x!1)")
                    (("2" (expand "length" -2 2)
                      (("2" (assert)
                        (("2" (inst? -2)
                          (("1" (assert) nil nil)
                           ("2" (typepred "n") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (grind) nil nil))
          nil))
        nil))
      nil)
     ("3" (typepred "n!1") (("3" (grind) nil nil)) nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (c_bubbling def-decl "[list[nat], nat]" bubblesort nil)
    (bubbling def-decl "list[nat]" bubblesort nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (c_bubblessort_aux_equiv_bubblesort_aux_TCC1 0
  (c_bubblessort_aux_equiv_bubblesort_aux_TCC1-1 nil 3784307300
   ("" (subtype-tcc) nil nil) nil nil))
 (c_bubblessort_aux_equiv_bubblesort_aux 0
  (c_bubblessort_aux_equiv_bubblesort_aux-1 nil 3784307304
   ("" (induct "l")
    (("1" (grind) nil nil)
     ("2" (skeep) (("2" (skeep) (("2" (postpone) nil nil)) nil)) nil)
     ("3" (skeep)
      (("3" (skeep) (("3" (typepred "n") (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (c_bubblessort_equiv_bubblesort 0
  (c_bubblessort_equiv_bubblesort-1 nil 3783188252
   ("" (measure-induct+ "length(l)" "l")
    (("" (expand "bubblesort" 1)
      (("" (expand "c_bubblesort" 1)
        (("" (lift-if) (("" (prop) (("" (postpone) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (c_bubbling_preserv_length 0
  (c_bubbling_preserv_length-1 nil 3783294099
   ("" (measure-induct+ "length(l)" "l")
    (("1" (skeep)
      (("1" (typepred "cont")
        (("1" (case "null?(x!1)")
          (("1" (grind) nil nil)
           ("2" (case "null?(cdr(x!1))")
            (("1" (grind) nil nil)
             ("2" (expand "c_bubbling" 3)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (expand "length" 1)
                    (("1" (assert)
                      (("1" (inst -3 "cons(car(x!1), cdr(cdr(x!1)))")
                        (("1" (inst -3 "cont-1")
                          (("1" (expand "length" -3 1)
                            (("1" (expand "length" -3 2)
                              (("1"
                                (expand "length" -3 2)
                                (("1"
                                  (expand "length" -3 1)
                                  (("1"
                                    (expand "length" 1 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "length" 2 2)
                    (("2" (inst -2 "cdr(x!1)")
                      (("2" (inst -2 "cont-1")
                        (("1" (expand "length" -2 2)
                          (("1" (assert)
                            (("1" (expand "length" 2 1)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (case "cont<0")
                          (("1" (assert) nil nil)
                           ("2" (case "cont-1<0")
                            (("1" (assert) nil nil)
                             ("2" (assert)
                              (("2"
                                (hide 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (assert) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (typepred "cont!1") (("2" (grind) nil nil)) nil)
     ("3" (typepred "cont!1") (("3" (grind) nil nil)) nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (c_bubbling def-decl "[list[nat], nat]" bubblesort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (c_bubbling_is_linear 0
  (c_bubbling_is_linear-1 nil 3783272297
   ("" (measure-induct+ "length(l)" "l")
    (("1" (skeep)
      (("1" (case "null?(x!1)")
        (("1" (typepred "cont") (("1" (grind) nil nil)) nil)
         ("2" (typepred "cont")
          (("2" (case "null?(cdr(x!1))")
            (("1" (grind) nil nil)
             ("2" (expand "c_bubbling" 3)
              (("2" (case "cont=0")
                (("1" (grind) nil nil)
                 ("2" (lift-if)
                  (("2" (prop)
                    (("1" (inst -3 "cons(car(x!1), cdr(cdr(x!1)))")
                      (("1" (inst?)
                        (("1" (expand "length" -3 1)
                          (("1" (expand "length" -3 2)
                            (("1" (expand "length" -3 2)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "length" -3 1)
                                  (("1"
                                    (expand "length" 1)
                                    (("1"
                                      (expand "length" 1)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (inst -2 "cdr(x!1)")
                      (("2" (inst? -2)
                        (("1" (expand "length" -2 2)
                          (("1" (assert)
                            (("1" (expand "length" 2)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (typepred "cont")
        (("2" (case "null?(x!1)")
          (("1" (grind) nil nil)
           ("2" (case "null?(cdr(x!1))")
            (("1" (grind) nil nil)
             ("2" (expand "c_bubbling" 4)
              (("2" (lift-if)
                (("2" (prop)
                  (("1" (grind) nil nil)
                   ("2" (inst -4 "cons(car(x!1), cdr(cdr(x!1)))")
                    (("2" (expand "length" -4)
                      (("2" (expand "length" -4 2)
                        (("2" (assert)
                          (("2" (expand "length" 1)
                            (("2" (expand "length" 1)
                              (("2"
                                (assert)
                                (("2"
                                  (inst? -4)
                                  (("1" (assert) nil nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (inst -3 "cdr(x!1)")
                    (("3" (expand "length" -3 2)
                      (("3" (assert)
                        (("3" (inst? -3)
                          (("1" (expand "length" 2)
                            (("1" (assert) nil nil)) nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (typepred "cont!1") (("3" (grind) nil nil)) nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (c_bubbling def-decl "[list[nat], nat]" bubblesort nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (c_bubbling_sum_n 0
  (c_bubbling_sum_n-1 nil 3783282223
   ("" (measure-induct+ "length(l)" "l")
    (("1" (case "null?(x!1)")
      (("1" (grind) nil nil)
       ("2" (case "null?(cdr(x!1))")
        (("1" (grind) nil nil)
         ("2" (skeep)
          (("2" (expand "c_bubbling" 3)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (assert) nil nil)
                 ("2" (inst -2 "cons(car(x!1), cdr(cdr(x!1)))")
                  (("2" (inst -2 " cont - 1")
                    (("1" (expand "length" -2) (("1" (grind) nil nil))
                      nil)
                     ("2" (assert)
                      (("2" (typepred "cont")
                        (("2" (assert) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (inst -1 "cdr(x!1)")
                  (("3" (expand "length" -1 2)
                    (("3" (inst -1 " cont - 1")
                      (("1" (assert) nil nil)
                       ("2" (typepred "cont") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep) (("3" (assert) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (case "null?(x!1)")
        (("1" (grind) nil nil)
         ("2" (case "null?(cdr(x!1))")
          (("1" (grind) nil nil)
           ("2" (expand "c_bubbling" 4)
            (("2" (lift-if)
              (("2" (prop)
                (("1" (assert) nil nil)
                 ("2" (inst -3 "cons(car(x!1), cdr(cdr(x!1)))")
                  (("2" (expand "length" -3)
                    (("2" (assert)
                      (("2" (expand "length" -3 2)
                        (("2" (inst -3 "cont-1")
                          (("1" (grind) nil nil)
                           ("2" (typepred "cont")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred "cont!1") (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (grind) nil nil))
          nil))
        nil))
      nil)
     ("3" (typepred "cont!1") (("3" (grind) nil nil)) nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (c_bubbling def-decl "[list[nat], nat]" bubblesort nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil)
   shostak))
 (bubblesort_aux_list_dont_chage_number_TCC1 0
  (bubblesort_aux_list_dont_chage_number_TCC1-1 nil 3783291987
   ("" (subtype-tcc) nil nil) nil nil))
 (bubblesort_aux_list_dont_chage_number 0
  (bubblesort_aux_list_dont_chage_number-1 nil 3783292006
   ("" (skeep)
    (("" (measure-induct+ "if(cont=0) then 0 else cont-1 endif" "cont")
      (("1" (skeep)
        (("1" (expand "c_bubblesort_aux " 1 1)
          (("1" (lift-if)
            (("1" (prop)
              (("1" (typepred "x!1") (("1" (grind) nil nil)) nil)
               ("2" (typepred "x!1")
                (("2" (copy -2)
                  (("2" (inst -1 "x!1-1")
                    (("1" (expand "c_bubblesort_aux" 2 2)
                      (("1" (lift-if)
                        (("1" (prop)
                          (("1" (hide 1)
                            (("1" (inst -1 "c_bubbling(l2, x!1)`1")
                              (("1"
                                (lift-if)
                                (("1"
                                  (case "x!1-1=0")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lemma
                                       "c_bubbling_preserv_length")
                                      (("2"
                                        (inst -1 "l2" "x!1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (inst -3 "x!1-1")
                                              (("2"
                                                (inst
                                                 -3
                                                 "c_bubbling(l, x!1)`1")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "c_bubbling_preserv_length")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "l"
                                                       "x!1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (lemma
                                                             "c_bubbling_sum_n")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "l"
                                                               "x!1")
                                                              (("2"
                                                                (lemma
                                                                 "c_bubbling_sum_n")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "l2"
                                                                   "x!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "y!1") (("2" (grind) nil nil)) nil)
       ("3" (typepred "y!1") (("3" (grind) nil nil)) nil)
       ("4" (typepred "cont!1") (("4" (grind) nil nil)) nil)
       ("5" (typepred "cont!1") (("5" (grind) nil nil)) nil)
       ("6" (assert) nil nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (wf_nat formula-decl nil naturalnumbers nil) nil
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (c_bubblesort_aux def-decl "[list[nat], nat]" bubblesort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (c_bubbling def-decl "[list[nat], nat]" bubblesort nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (c_bubbling_preserv_length formula-decl nil bubblesort nil)
    (c_bubbling_sum_n formula-decl nil bubblesort nil) nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (bubblesort_aux_sum_nquadratic_TCC1 0
  (bubblesort_aux_sum_nquadratic_TCC1-1 nil 3783284463
   ("" (subtype-tcc) nil nil) nil nil))
 (bubblesort_aux_sum_nquadratic 0
  (bubblesort_aux_sum_nquadratic-1 nil 3783284467
   ("" (skeep)
    (("" (measure-induct+ "if(cont=0) then 0 else cont-1 endif" "cont")
      (("1" (case "x!1=0")
        (("1" (grind) nil nil)
         ("2" (typepred "x!1")
          (("2" (expand "^")
            (("2" (expand "expt")
              (("2" (expand "expt")
                (("2" (expand "expt")
                  (("2" (expand "c_bubblesort_aux" 2)
                    (("2" (lift-if)
                      (("2" (prop)
                        (("2" (hide 1)
                          (("2" (case "x!1-1=0")
                            (("1" (grind) nil nil)
                             ("2" (inst -2 "x!1-1")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma
                                   "bubblesort_aux_list_dont_chage_number")
                                  (("1"
                                    (inst
                                     -1
                                     "l"
                                     "x!1-1"
                                     "c_bubbling(l, x!1)`1")
                                    (("1"
                                      (lemma
                                       "c_bubbling_preserv_length")
                                      (("1"
                                        (inst -1 "l" "x!1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "c_bubbling_sum_n")
                                            (("1"
                                              (inst -1 "l" "x!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (typepred "cont!1") (("2" (grind) nil nil)) nil)
       ("3" (assert) nil nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (wf_nat formula-decl nil naturalnumbers nil) nil
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (c_bubblesort_aux def-decl "[list[nat], nat]" bubblesort nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil) nil
    (bubblesort_aux_list_dont_chage_number formula-decl nil bubblesort
     nil)
    (c_bubbling_preserv_length formula-decl nil bubblesort nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (c_bubbling_sum_n formula-decl nil bubblesort nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (c_bubbling def-decl "[list[nat], nat]" bubblesort nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (expt def-decl "real" exponentiation nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil))
   shostak))
 (bubbling_is_quadratic_TCC1 0
  (bubbling_is_quadratic_TCC1-1 nil 3783188249
   ("" (subtype-tcc) nil nil) nil nil))
 (bubbling_is_quadratic 0
  (bubbling_is_quadratic-1 nil 3783260976
   ("" (expand "member")
    (("" (expand "Omicron")
      (("" (skeep)
        (("" (expand "c_bubblesort")
          (("" (inst 1 "2" "0")
            (("" (skeep)
              (("" (lift-if)
                (("" (prop)
                  (("1" (grind) nil nil)
                   ("2" (lemma "bubblesort_aux_sum_nquadratic")
                    (("2" (inst -1 "l" "length(l)-1")
                      (("1" (expand "list2finseq")
                        (("1" (grind) nil nil)) nil)
                       ("2" (typepred "length(l)")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nat_exp application-judgement "nat" exponentiation nil)
    (Omicron const-decl "setof[[nat -> nonneg_real]]" complexity nil)
    (c_bubblesort const-decl "[list[nat], nat]" bubblesort nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_expt application-judgement "int" exponentiation nil)
    (int_exp application-judgement "int" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bubblesort_aux_sum_nquadratic formula-decl nil bubblesort nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (member const-decl "bool" sets nil))
   shostak)))

